{"ast":null,"code":"var _AuthService;\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.systemInfo = new BehaviorSubject({\n      currentDateTime: '2024-12-06 23:00:10',\n      userLogin: 'tekteku'\n    });\n    // Update datetime every second\n    setInterval(() => {\n      this.updateDateTime();\n    }, 1000);\n  }\n  updateDateTime() {\n    const now = new Date();\n    this.systemInfo.next({\n      ...this.systemInfo.value,\n      currentDateTime: now.toISOString().replace('T', ' ').slice(0, 19)\n    });\n  }\n  getSystemInfo() {\n    return this.systemInfo.asObservable();\n  }\n  getCurrentDateTime() {\n    return this.systemInfo.value.currentDateTime;\n  }\n  getUserLogin() {\n    return this.systemInfo.value.userLogin;\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _AuthService)();\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","systemInfo","currentDateTime","userLogin","setInterval","updateDateTime","now","Date","next","value","toISOString","replace","slice","getSystemInfo","asObservable","getCurrentDateTime","getUserLogin","factory","ɵfac","providedIn"],"sources":["C:\\Users\\TaherCh\\Desktop\\STB\\stb-bank-app\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface SystemInfo {\r\n  currentDateTime: string;\r\n  userLogin: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private systemInfo = new BehaviorSubject<SystemInfo>({\r\n    currentDateTime: '2024-12-06 23:00:10',\r\n    userLogin: 'tekteku'\r\n  });\r\n\r\n  constructor() {\r\n    // Update datetime every second\r\n    setInterval(() => {\r\n      this.updateDateTime();\r\n    }, 1000);\r\n  }\r\n\r\n  private updateDateTime() {\r\n    const now = new Date();\r\n    this.systemInfo.next({\r\n      ...this.systemInfo.value,\r\n      currentDateTime: now.toISOString().replace('T', ' ').slice(0, 19)\r\n    });\r\n  }\r\n\r\n  getSystemInfo(): Observable<SystemInfo> {\r\n    return this.systemInfo.asObservable();\r\n  }\r\n\r\n  getCurrentDateTime(): string {\r\n    return this.systemInfo.value.currentDateTime;\r\n  }\r\n\r\n  getUserLogin(): string {\r\n    return this.systemInfo.value.userLogin;\r\n  }\r\n}"],"mappings":";AACA,SAASA,eAAe,QAAoB,MAAM;;AAUlD,OAAM,MAAOC,WAAW;EAMtBC,YAAA;IALQ,KAAAC,UAAU,GAAG,IAAIH,eAAe,CAAa;MACnDI,eAAe,EAAE,qBAAqB;MACtCC,SAAS,EAAE;KACZ,CAAC;IAGA;IACAC,WAAW,CAAC,MAAK;MACf,IAAI,CAACC,cAAc,EAAE;IACvB,CAAC,EAAE,IAAI,CAAC;EACV;EAEQA,cAAcA,CAAA;IACpB,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACN,UAAU,CAACO,IAAI,CAAC;MACnB,GAAG,IAAI,CAACP,UAAU,CAACQ,KAAK;MACxBP,eAAe,EAAEI,GAAG,CAACI,WAAW,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE;KACjE,CAAC;EACJ;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACZ,UAAU,CAACa,YAAY,EAAE;EACvC;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACd,UAAU,CAACQ,KAAK,CAACP,eAAe;EAC9C;EAEAc,YAAYA,CAAA;IACV,OAAO,IAAI,CAACf,UAAU,CAACQ,KAAK,CAACN,SAAS;EACxC;;eA/BWJ,WAAW;;mCAAXA,YAAW;AAAA;;SAAXA,YAAW;EAAAkB,OAAA,EAAXlB,YAAW,CAAAmB,IAAA;EAAAC,UAAA,EAFV;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}